* Wrap some Statsmodels estimators to preserve pandas labels
** OLS
#+begin_src python :tangle metrics_miscellany/estimators.py
import statsmodels.api as sm
from statsmodels.stats import correlation_tools
import numpy as np
import warnings
import pandas as pd

def ols(X,y,cov_type='HC3'):
    """OLS estimator of b in y = Xb + u. 

    Returns both estimate b as well as an estimate of Var(b).

    The estimator used for the covariance matrix depends on the
    optional argument =cov_type=.
    """
    est = sm.OLS(y,X).fit()
    b = pd.Series(est.params,index=X.columns)
    if cov_type=='HC3':
        V = est.cov_HC3
    elif cov_type=='OLS':
        XX = X.T@X
        if np.linalg.eigh(XX)[0].min()<0:
            XX = correlation_tools.cov_nearest(XX,method='nearest')
            warnings.warn("X'X not positive (semi-) definite.  Correcting!  Estimated variances should not be affected.")
        V = est.resid.var()*np.linalg.inv(XX)
    elif cov_type=='HC2':
        V = est.cov_HC2
    elif cov_type=='HC1':
        V = est.cov_HC1
    elif cov_type=='HC0':
        V = est.cov_HC0
    else:
        raise ValueError("Unknown type of covariance matrix.")

    if np.linalg.eigh(V)[0].min()<0:
        V = correlation_tools.cov_nearest(V,method='nearest')
        warnings.warn("Estimated covariance matrix not positive (semi-) definite.  Correcting!  Estimated variances should not be affected.")

    V = pd.DataFrame(V,index=X.columns,columns=X.columns)

    return b,V
    
#+end_src

*** OLS Tests
#+begin_src python :tangle metrics_miscellany/test/test_ols.py
import pandas as pd
from metrics_miscellany.estimators import ols
import numpy as np

def main(N=500000,tol=1e-3):

    x = pd.DataFrame({'x':np.random.standard_normal((N,))})
    x['Constant'] = 1

    beta = pd.DataFrame({'Coefficients':[1,0]},index=['x','Constant'])

    u = pd.DataFrame(np.random.standard_normal((N,)))

    y = (x@beta).values + u.values

    b,V = ols(x,y)

    assert np.abs(b-beta.squeeze()).max() < tol

if __name__=='__main__':
    main()

#+end_src
* Hypothesis Tests
#+begin_src python :tangle metrics_miscellany/tests.py
from statsmodels.stats import correlation_tools
from scipy import stats
import pandas as pd
import numpy as np

def chi2_test(restriction,b,V,TEST=False):

    myb = b.query(restriction)

    myV = correlation_tools.cov_nearest(V,threshold=1e-10)
    
    myV = pd.DataFrame(myV,index=V.index,columns=V.columns).reindex(myb.index,axis=0).reindex(myb.index,axis=1)

    if TEST: # Generate values of my that satisfy Var(myb)=Vb and Emyb=0
        myb = myb*0 + stats.multivariate_normal(cov=((1e0)*np.eye(myV.shape[0]) + myV)).rvs().reshape((-1,1))

    chi2 = (myb.values.T@np.linalg.inv(myV)@myb).values[0][0]

    return chi2,1-stats.distributions.chi2.cdf(chi2,df=len(myb)),len(myb)


#+end_src

** Test of chi2_test
#+begin_src python :tangle metrics_miscellany/test/test_chi2_test.py
import pandas as pd
from scipy import stats
from metrics_miscellany import tests

def main():

    labels = ['a','b']
    D = pd.DataFrame([[2,1],[2,2]],index=labels,columns=labels)
    D.index.name = 'Variable'
    D.columns.name = 'Variable'

    V = D.T@D

    b = pd.DataFrame(stats.multivariate_normal(cov=V).rvs(),index=labels)
    b.index.name = 'Variable'

    return tests.chi2_test("Variable in ['a']",b,V)

if __name__ == '__main__':
    p = []
    m = 1000
    for i in range(m):
        p.append(main()[1])

    



#+end_src
